language: python
dist: bionic
cache:
  pip: true
  directories:
    - $HOME/.ccache  # https://github.com/travis-ci/travis-ci/issues/5853

addons:
  apt:
    packages:
      - libhdf5-serial-dev
      - libnetcdf-dev
      - libproj-dev
      - proj-data
      - proj-bin
      - libgeos-dev
      - libopenmpi-dev

env:
  global:
    PIP=pip
    HOMEBREW_NO_AUTO_UPDATE=1

before_install:
  - |
    case $TRAVIS_OS_NAME in
      linux)
        $PIP install --upgrade virtualenv
        python -m virtualenv venv
        source venv/bin/activate
        export PATH=/usr/lib/ccache:$PATH
        ;;
      windows)
        # From https://github.com/trichter/conda4travis/blob/master/conda4travis.sh
        export MINICONDA=/c/miniconda
        MINICONDA_WIN=$(cygpath --windows $MINICONDA)
        choco install openssl.light
        choco install miniconda3 --params="'/AddToPath:0 /D:$MINICONDA_WIN'"
        # The following lines remove bin directories from chocolatey.
        # Otherwise f2py might find the pre-installed fortran compiler
        # instead of the conda fortran compiler.
        # See dicussion in https://github.com/trichter/toeplitz/pull/2
        echo original PATH $PATH
        PATH=$(echo "$PATH" | sed -e 's|:/c/ProgramData/chocolatey/bin||')
        PATH=$(echo "$PATH" | sed -e 's|:/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin||')
        echo manipulated PATH $PATH
        # the following line is necessary since conda 4.7
        # see travis fail https://travis-ci.org/trichter/conda4travis/jobs/592665691
        # see fix https://github.com/conda/conda/issues/8836#issuecomment-506388019
        source $MINICONDA/Scripts/activate

        source $MINICONDA/etc/profile.d/conda.sh
        hash -r
        conda config --set always_yes yes
        if [[ "$TRAVIS_OS_NAME" != "windows" ]]; then
          conda update -q conda
        fi
        conda info -a

        # Install dependencies
        CYTHON=$(grep cython tests/test_prerequirements.txt)
        NUMPY=$(grep numpy tests/test_prerequirements.txt)

        CARTOPY=$(grep cartopy tests/test_requirements.txt)
        H5PY=$(grep h5py tests/test_requirements.txt)
        MATPLOTLIB=$(grep matplotlib tests/test_requirements.txt)
        SCIPY=$(grep scipy tests/test_requirements.txt)
        conda install --yes -c conda-forge $CYTHON $NUMPY $CARTOPY $H5PY $MATPLOTLIB $SCIPY
        ;;
      osx)
        sudo mkdir -p /usr/local/man
        sudo chown -R "${USER}:admin" /usr/local/man
        HOMEBREW_NO_AUTO_UPDATE=1 brew install hdf5 proj geos open-mpi netcdf ccache
        HOMEBREW_NO_AUTO_UPDATE=1 brew uninstall gdal postgis numpy  # WHY?
        export PATH=/usr/local/opt/ccache/libexec:$PATH
        ;;
    esac
    mkdir -p $HOME/.config/yt
    echo "[yt]" > $HOME/.config/yt/ytrc
    echo "suppressStreamLogging = True" >> $HOME/.config/yt/ytrc
    cat $HOME/.config/yt/ytrc
    cp tests/matplotlibrc .

install:
  - |
    # setup environment (useless for windows, already done by conda)
    if [[ "$TRAVIS_OS_NAME" != "windows" ]]; then
      ccache -s
      # Upgrade pip and setuptools and wheel to get clean install
      $PIP install --upgrade pip
      $PIP install --upgrade wheel
      $PIP install --upgrade setuptools
    fi
    echo "Travis build stage: $TRAVIS_BUILD_STAGE_NAME"
    # install dependencies yt
    if [[ $MINIMAL == 1 ]]; then
      # Ensure numpy and cython are installed so dependencies that need to be built
      # don't error out
      # The first numpy to support py3.6 is 1.12, but numpy 1.13 matches 
      # unyt so we'll match it here. 
      $PIP install numpy==1.13.3 cython==0.26.1
      $PIP install -r tests/test_minimal_requirements.txt
    else
      # Getting cartopy installed requires getting cython and numpy installed
      # first; this is potentially going to be fixed with the inclusion of
      # pyproject.toml in cartopy.
      # These versions are pinned, so we will need to update/remove them when
      # the hack is no longer necessary.
      $PIP install -r tests/test_prerequirements.txt
      CFLAGS="$CFLAGS -DACCEPT_USE_OF_DEPRECATED_PROJ_API_H" $PIP install -r tests/test_requirements.txt
    fi
    $PIP install -e .

jobs:
  include:
    - stage: tests
      name: "Python: 3.6 Minimal Dependency Unit Tests"
      python: 3.6
      env: MINIMAL=1
      script: coverage run $(which nosetests) -c nose_unit.cfg

    - stage: tests
      name: "Python: 3.6 Unit Tests"
      python: 3.6
      script: coverage run $(which nosetests) -c nose_unit.cfg

    - stage: tests
      name: "Python: 3.8 Unit Tests"
      python: 3.8
      script: coverage run $(which nosetests) -c nose_unit.cfg

      # This is not necessarily going to be forever -- once we merge yt-4.0
      # with master we will likely change this around to reduce the number of
      # versions we test on.
    - stage: tests
      name: "Python: 3.7 Answer Tests"
      python: 3.7
      script: coverage run $(which nosetests) -c nose_answer.cfg
      after_failure: python tests/report_failed_answers.py -f -m --xunit-file "answer_nosetests.xml"

    - stage: tests
      name: "MacOS: Unit Tests"
      os: osx
      osx_image: xcode10.1
      language: shell
      env: PIP=pip3
      cache:
        - directories:
          - $HOME/Library/Caches/pip
      script: nosetests -c nose_unit.cfg

    - stage: tests
      name: "Windows: Unit Tests"
      os: windows
      language: shell
      script: coverage run -m nose -c nose_unit.cfg --traverse-namespace
      cache:
          directories:
          - /c/miniconda/pkgs
          - $HOME/AppData/Local/Temp/chocolatey
          - $HOME/AppData/Local/pip
          - $HOME/AppData/Local/conda/conda/pkgs
          - $HOME/.conda/pkgs


after_success:
  - codecov

