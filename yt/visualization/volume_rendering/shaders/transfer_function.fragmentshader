uniform float tf_min;
uniform float tf_max;
uniform float tf_log;
uniform sampler1D tf_tex;

void sample_texture(vec3 tex_curr_pos, inout vec4 curr_color, float tdelta,
                    float t, vec3 dir)
{
    float tm = tf_min;
    float tp = tf_max;
    vec4 tf_sample;
 
    float tex_sample = texture(ds_tex, tex_curr_pos).x;
 
    if (tf_log > 0.5) {
       tex_sample = log(tex_sample) / log(10.f);
       tm = log(tm) / log(10.f);
       tp = log(tp) / log(10.f);
    }
    tf_sample = texture(tf_tex, (tex_sample - tm) / (tp - tm));

    float ta = max((1.0f - tdelta * tf_sample.a), 0.0);
    curr_color = tdelta * tf_sample + ta * curr_color;
}

vec4 cleanup_phase(in vec4 curr_color) 
{
  return vec4(curr_color);
}

